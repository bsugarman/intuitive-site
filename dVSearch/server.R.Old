library(shiny)
library(shinyjs)
library(DBI)
library(data.table)
library(odbc)
library(DT)
library(leaflet)

server <- function(input, output, session) {
test <- reactiveValues() 
  output$tbl <- DT::renderDataTable({
    conn <- dbConnect(odbc::odbc(),"clinicalaffairs")
    
    # on.exit(dbDisconnect(conn), add = TRUE)
    res <-
      DBI::dbSendQuery(
        conn,
        "SELECT  Custom5, Custom1, Translated_Author, Journal, Reviewed_Item, Year, Author, Title, Abstract FROM EndNote2"
      )
    dt <- DBI::dbFetch(res)
    
    dt[, input$show_vars, drop = FALSE]
    setnames(
      dt,
      old = c(
        "Reviewed_Item",
        "Custom1",
        "Custom5",
        "Translated_Author"
      ),
      new = c("LOE", "Procedure", "Robotic", "Country")
    )
    setcolorder(
      dt,
      c(
        "Title",
        "Author",
        "Year",
        "LOE",
        "Country",
        "Procedure",
        "Journal",
        "Robotic",
        "Abstract"
      )
    )
    
    dt$Author <- enc2native(dt$Author)
    dt$Abstract <- enc2native(dt$Abstract)
    dt$Journal <- enc2native(dt$Journal)
    dt$Robotic <- as.factor(dt$Robotic)
    dt$Title <- enc2native(dt$Title)
    dt$Year <- as.integer(dt$Year)
    dt$LOE <- as.factor(dt$LOE)
    dt$Procedure <- stringi::stri_sub(dt$Procedure, from = 2)
    dt$Procedure <-
      stringi::stri_replace_all_regex(dt$Procedure, "[|]", ", ")
    dt$Author <-
      stringi::stri_extract_first_regex(dt$Author, "^(.+?),|[^,]+")
    dt$Author <-
      stringi::stri_replace_all_regex(dt$Author, "[,]", " ")
    dt$Procedure <-
      stringi::stri_replace_all_regex(dt$Procedure, "[-]", "None")
    test$a <- jsonlite::toJSON(dt)
    
    
    datatable(
      width = '1000px',
      extensions = list('Buttons' = NULL, 'ColReorder' = NULL),
      cbind(' ' = '&oplus;', dt),
      escape = -2,
      options = list(
        colReorder = list(realtime = TRUE),
        columnDefs = list(
          list(width = '15%', targets = c(3, 5, 6, 7, 8, 9)),
          list(width = '5px', targets = c(1)),
          list(width = '13%', targets = c(4)),
          list(width = '19%', targets = c(2)),
          
          
          
          
          list(visible = FALSE, targets = c(0, 9, 10)),
          list(
            orderable = FALSE,
            className = 'details-control',
            targets = 1
          )
        ),
        
        search = list(regex = TRUE),
        server = FALSE,
        dom = 'Bfrtip',
        searchHighlight = TRUE,
        deferRender = TRUE,
        server = FALSE,
        scrollY = 400,
        scroller = TRUE,
        pageLength = 50,
        #update excel button to be sekected
        buttons = list(
          list(
            extend = "pdf",
            text = "Export Selected PDF",
            exportOptions = list(
              stripHtml = FALSE,
              columns = ':visible',
              rows = ".selected, Abstract"
              
              
            ),
           
            orientation = 'landscape',
            customize = JS("function(doc){console.dir(doc);}")
          ),
          
          list(
            extend = "excel",
            text = "Export Selected Excel",
            exportOptions = list(
              stripHtml = FALSE,
              columns = ':visible',
              rows = ".selected, Abstract"
            )
              
            ),
          
          
          
          c('copy', 'print', 'colvis', 'pageLength')
        )
      ),
      
      filter = list(position = 'top'),
      
      
      
      callback = JS(
        "
        table.column(1).nodes().to$().css({cursor: 'pointer'});
        var format = function(d) {
        return '<div style=\"background-color:#eee; padding: .5em;\"> <b>Abstract:</b> ' +
        d[10] + '<br></br>'+ '<div style=\"height:1px;border-bottom:1px solid #f00\"></div>'  + '<br></br>' +  '<b>Bibliography: </b>' + d[3] + ', '+ d[2] + ', ' + d[4] +'<br></br>' + '</div>';
        };
        table.on('click', 'td.details-control', function() {
        var td = $(this), row = table.row(td.closest('tr'));
        if (row.child.isShown()) {
        row.child.hide();
        td.html('&oplus;');
        } else {
        row.child(format(row.data())).show();
        td.html('&CircleMinus;');
        }
        });
        
        
        "
      )
      
      )
    
    
    
    
})

  
  observeEvent(input$favButton, {
    table <- jsonlite::fromJSON(test$a)
    ids <- input$tbl_rows_selected
    
    output$favorites <- DT::renderDataTable({
      table[ids, ]
      datatable(
        table[ids, ],
        width = '1000px',
        extensions = list('Buttons' = NULL, 'ColReorder' = NULL),
        options = list(
          colReorder = list(realtime = TRUE),
          columnDefs = list(
            list(visible = FALSE, targets = c(0, 9)),
            list(
              orderable = FALSE,
              className = 'details-control',
              targets = 1
            )
          ),
          
          search = list(regex =
                          TRUE),
          server =
            FALSE,
          dom = 'Bfrtip',
          searchHighlight = TRUE,
          deferRender = TRUE,
          server = FALSE,
          scrollY = 400,
          scroller = TRUE,
          pageLength = 50,
          
          buttons = list(
            list(
              extend = "pdf",
              text = "Export Selected",
              exportOptions = list(
                stripHtml = FALSE,
                columns = ':visible',
                rows = ".selected"
              ),
              orientation = 'landscape',
              customize = JS("function(doc){console.dir(doc);}")
            ),
            
            c('copy', 'print', 'colvis', 'excel', 'pageLength')
          )
        ),
        
        filter = list(position = 'top')
      
        
        
      )
      
      
    })
  })
  
  
  points <- eventReactive(input$recalc, {
    cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
  }, ignoreNULL = FALSE)
  
  
  
  
  output$mymap <- renderLeaflet({
    leaflet(height = '1000px') %>%
      addProviderTiles(providers$Stamen.TonerLite,
                       options = providerTileOptions(noWrap = TRUE)) %>%
      
      addMarkers(data = points())
    
  })
  
  }


